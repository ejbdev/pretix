{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Seating Plan",
  "description": "Seating plan for venues",
  "type": "object",
  "properties": {
    "name": {
      "type": "string"
    },
    "zones": {
      "type": "array",
      "description": "List of zones",
      "items": { "$ref": "#/definitions/zone" }
    }
  },
  "definitions": {
    "zone": {
      "type": "object",
      "description": "Zone represents the parent entity that groups all other entities. The zone itself can be hidden or displayed. Examples of different zones would be 'main area', 'balcony', etc.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the zone"
        },
        "displayed": {
          "type": "boolean",
          "description": "Should the zone outlines be displayed or not?"
        },
        "position": { "$ref": "#/definitions/position" },
        "rows": {
          "type": "array",
          "description": "List of rows",
          "items": { "$ref": "#/definitions/row" }
        },
        "areas": {
          "type": "array",
          "description": "List of areas",
          "items": { "$ref": "#/definitions/area" }
        }
      },
      "required": ["position", "rows"],
      "additionalProperties": false
    },
    "row": {
      "type": "object",
      "description": "Row is simply a collection of seats with some additional information that simplifies working with seats.",
      "$comment": "Might need more (editor) infromation like direction, angle, curvature",
      "properties": {
        "row_number": {
          "type": "string",
          "description": "Row number or name by which it can be identified"
        },
        "seats": {
          "type": "array",
          "description": "List of seats in this row",
          "items": { "$ref": "#/definitions/seat" }
        },
        "number_of_seats": {
          "type": "integer",
          "$comment": "This property might be redundant. Since the seats are nested within the row, it's easy to just count them."
        },
        "seats_spacing": {
          "type": "integer",
          "description": "How far apart should the seats be positioned?"
        },
        "position": {
          "$ref": "#/definitions/position"
        }
      },
      "required": ["seats", "row_number"],
      "additionalProperties": false
    },
    "seat": {
      "type": "object",
      "description": "Individual seat that can be reserved.",
      "properties": {
        "seat_number": {
          "type": "string",
          "description": "Seat number or name by which it can be identified"
        },
        "position": { "$ref": "#/definitions/position" },
        "category": {
          "type": "string",
          "description": "What category does this seat belong to?",
          "$comment": "Categories might be a separate property, that gives us more information about the specific categories."
        },
        "price": {
          "type": "string",
          "description": "Price of the seat"
        },
        "taken": {
          "type": "boolean",
          "description": "Is this seat already taken?"
        }
      },
      "required": ["seat_number", "position", "taken"],
      "additionalProperties": false
    },
    "area": {
      "type": "object",
      "description": "Area can represent anything from general admission area, to stage, bar or even tables.",
      "$comment": "TODO needs a definition: should it be defined with parameters or with a free-form svg?",
      "properties": {},
      "additionalProperties": false
    },
    "position": {
      "type": "object",
      "description": "Position of the element",
      "properties": {
        "x": {
          "type": "integer"
        },
        "y": {
          "type": "integer"
        }
      },
      "required": ["x", "y"],
      "additionalProperties": false
    }
  }
}
